Commentaries:
	//	inline commentary
	/* multiline commentary */
Directives:
	@op
	X@join Y
	@preinc X
	@rawinc X
	@save {DATA, THAT WON'T BE CHANGED}
	@def
	@undef

@op:
	Since the `@` character is used to specify preprocessor directives to insert it into the file text, the `@op` directive was defined.
	Note:
		if you don't want to leave whitespace, add `@` after `@op`.
	Examples:
		`@op@preinc "LocalFilePath"` -> `@preinc "LocalFilePath"`
		`@op@ preinc "LocalFilePath"` -> `@preinc "LocalFilePath"`
		`The @op symbol is used for text preprocessing` -> `The @ symbol is used for text preprocessing`

X@join Y:
	Used to connect the left and right parts.
	Examples:
		`123@join 456` -> `123456`
		`123@join456` -> ERROR!

@preinc X:
	Include preprocessed text file content.
	Note:
		X - file path, can be enclosed between "" or <>.
		If the path is enclosed between "", then the file is searched in the folder of the file from which the request was made,
		otherwise from the directories passed by the user.
	Examples:
		`@preinc "LocalFilePath"` -> included local file content
		`@preinc <SpecFilePath>` -> included file content from specified directories

@rawinc X:
	Include text file content without preprocessing.
	Note:
		X - file path, can be enclosed between "" or <>.
		If the path is enclosed between "", then the file is searched in the folder of the file from which the request was made,
		otherwise from the directories passed by the user.
	Examples:
		`@rawinc "LocalFilePath"` -> included local file content
		`@rawinc <SpecFilePath>` -> included file content from specified directories

@save X:
	Does not preprocess data inside braces
	Note:
		X - data inside braces
	Examples:
		`message = @save {"hello, world!";	// hello world, huh :D}` -> `message = "hello, world!";	// hello world, huh :D`

@def X Y:
	Defines a macro
	Note:
		Macros cannot be used when using some preprocessor directives (@preinc, @rawinc, @save)
		X - macro name (you can specify parenthesized parameters that must follow the macro name)
		Y - expression expression in braces
		The `...` operator in parameters expands the number of parameters to whatever is determined at the time the argument is used.
		When using `@ARG_INDEX` (ARG_INDEX - argument index) in the expression of a macro containing `...` in the parameters,
			the argument that corresponds to the given index in the `...` arguments will be substituted:
			`@def FUNC(a, ...)	{a + @1 - @0} /*...*/ FUNC(123, 456, 789)` -> `123 + 789 - 456`
		When using `@` in a macro expression containing a `...` parameter,
			the number of arguments in the `...` arguments will be substituted:
			`@def FUNC(a, ...)	{@ * a} /*...*/ FUNC(123, 456, 789)` -> `2 * 123`

@undef X
	Deletes a macro
	Note:
		X - macro name