/**
 * @file gear-grammar.h
 * @author github.com/TyfoC
 * @brief 
 * @version 1.0
 * @date 4 June 2023
 */

#pragma once
#ifndef GEAR_GRAMMAR
#define GEAR_GRAMMAR

#include "gear-typedefs.h"

enum {
	GEAR_GRAMMAR_GROUP_UNDEFINED,
	GEAR_GRAMMAR_GROUP_REDUNDANT,
	GEAR_GRAMMAR_GROUP_OPERATOR,
	GEAR_GRAMMAR_GROUP_NUMERIC_LITERAL,
	GEAR_GRAMMAR_GROUP_STRING_LITERAL,						//	defined specifically
	GEAR_GRAMMAR_GROUP_IDENTIFIER							//	letter[letter, '_', digit]*
};

enum {
	GEAR_GRAMMAR_TYPE_UNDEFINED,
	GEAR_GRAMMAR_TYPE_SPACE,								//	' ' | '\t' | '\v' | '\f'
	GEAR_GRAMMAR_TYPE_LINE_BREAK,							//	"\r\n" | "\r" | "\n"
	GEAR_GRAMMAR_TYPE_SINGLE_LINE_COMMENT,					//	only start of comment
	GEAR_GRAMMAR_TYPE_MULTILINE_COMMENT,					//	"start0end"
	GEAR_GRAMMAR_TYPE_HEX_LITERAL,							//	0['x', 'X'][letter(a-f), letter(A-F), digit]+
	GEAR_GRAMMAR_TYPE_DEC_LITERAL,							//	digit+
	GEAR_GRAMMAR_TYPE_OCT_LITERAL,							//	0['o', 'O']?[digit(0-7)]+
	GEAR_GRAMMAR_TYPE_BIN_LITERAL,							//	0['b', 'B']['0', '1']+
	GEAR_GRAMMAR_TYPE_CHAR_LITERAL,							//	"limiter0escape-sequence-sign"
	GEAR_GRAMMAR_TYPE_STRING_LITERAL,						//	"limiter0escape-sequence-sign"
	GEAR_GRAMMAR_TYPE_OPERATOR_ADD,
	GEAR_GRAMMAR_TYPE_OPERATOR_SUB,
	GEAR_GRAMMAR_TYPE_OPERATOR_MUL,
	GEAR_GRAMMAR_TYPE_OPERATOR_DIV,
	GEAR_GRAMMAR_TYPE_OPERATOR_MOD,
	GEAR_GRAMMAR_TYPE_OPERATOR_INC,
	GEAR_GRAMMAR_TYPE_OPERATOR_DEC,
	GEAR_GRAMMAR_TYPE_OPERATOR_EQUAL_TO,
	GEAR_GRAMMAR_TYPE_OPERATOR_NOT_EQUAL,
	GEAR_GRAMMAR_TYPE_OPERATOR_GREATER_THAN,
	GEAR_GRAMMAR_TYPE_OPERATOR_LESS_THAN,
	GEAR_GRAMMAR_TYPE_OPERATOR_GREATER_OR_EQUAL,
	GEAR_GRAMMAR_TYPE_OPERATOR_LESS_OR_EQUAL,
	GEAR_GRAMMAR_TYPE_OPERATOR_NOT,
	GEAR_GRAMMAR_TYPE_OPERATOR_AND,
	GEAR_GRAMMAR_TYPE_OPERATOR_OR,
	GEAR_GRAMMAR_TYPE_OPERATOR_XOR,
	GEAR_GRAMMAR_TYPE_OPERATOR_COMPLEMENT,
	GEAR_GRAMMAR_TYPE_OPERATOR_LSH,
	GEAR_GRAMMAR_TYPE_OPERATOR_RSH,
	GEAR_GRAMMAR_TYPE_OPERATOR_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_ADD_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_SUB_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_MUL_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_DIV_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_MOD_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_LSH_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_RSH_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_AND_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_OR_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_XOR_AND_ASSIGN,
	GEAR_GRAMMAR_TYPE_OPERATOR_OPENING_PARENTHESIS,
	GEAR_GRAMMAR_TYPE_OPERATOR_CLOSING_PARENTHESIS,
	GEAR_GRAMMAR_TYPE_OPERATOR_OPENING_BRACKET,
	GEAR_GRAMMAR_TYPE_OPERATOR_CLOSING_BRACKET,
	GEAR_GRAMMAR_TYPE_OPERATOR_OPENING_BRACE,
	GEAR_GRAMMAR_TYPE_OPERATOR_CLOSING_BRACE,
	GEAR_GRAMMAR_TYPE_OPERATOR_PREPROCESSOR_DIRECTIVE,
	GEAR_GRAMMAR_TYPE_OPERATOR_DOT,
	GEAR_GRAMMAR_TYPE_OPERATOR_COMMA,
	GEAR_GRAMMAR_TYPE_OPERATOR_COLON,
	GEAR_GRAMMAR_TYPE_OPERATOR_SEMICOLON,
};

typedef struct gtoken_t {
	size_t		group;										//	GEAR_GRAMMAR_GROUP_*
	size_t		type;										//	GEAR_GRAMMAR_TYPE_*
	const char*	pattern;
} gtoken_t;

extern const char* GearGrammarGroupStrings[];
extern const gtoken_t GearGrammar[];
extern const size_t GearGrammarCount;
size_t gfind_grammar_index_by_type(size_t type);

#endif